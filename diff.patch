diff -crbN xbmc-12.2.orig/xbmc/windowing/egl/EGLNativeTypeBoxee.cpp xbmc-12.2/xbmc/windowing/egl/EGLNativeTypeBoxee.cpp
*** xbmc-12.2.orig/xbmc/windowing/egl/EGLNativeTypeBoxee.cpp  1970-01-01 01:00:00.000000000 +0100
--- xbmc-12.2/xbmc/windowing/egl/EGLNativeTypeBoxee.cpp	2013-07-31 14:32:46.000000000 +0200
***************
*** 0 ****
--- 1,142 ----
+ /*
+  *      Copyright (C) 2011-2012 Team XBMC
+  *      http://www.xbmc.org
+  *
+  *  This Program is free software; you can redistribute it and/or modify
+  *  it under the terms of the GNU General Public License as published by
+  *  the Free Software Foundation; either version 2, or (at your option)
+  *  any later version.
+  *
+  *  This Program is distributed in the hope that it will be useful,
+  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+  *  GNU General Public License for more details.
+  *
+  *  You should have received a copy of the GNU General Public License
+  *  along with XBMC; see the file COPYING.  If not, see
+  *  <http://www.gnu.org/licenses/>.
+  *
+  */
+ #include "system.h"
+ #include <EGL/egl.h>
+ #include "EGLNativeTypeBoxee.h"
+ #include "guilib/gui3d.h"
+ 
+ CEGLNativeTypeBoxee::CEGLNativeTypeBoxee()
+ {
+ }
+ 
+ CEGLNativeTypeBoxee::~CEGLNativeTypeBoxee()
+ {
+ } 
+ 
+ bool CEGLNativeTypeBoxee::CheckCompatibility()
+ {
+ #if defined(TARGET_BOXEE)
+   return true;
+ #endif
+   return false;
+ }
+ 
+ void CEGLNativeTypeBoxee::Initialize()
+ {
+   return;
+ }
+ void CEGLNativeTypeBoxee::Destroy()
+ {
+   return;
+ }
+ 
+ bool CEGLNativeTypeBoxee::CreateNativeDisplay()
+ {
+   m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+   return true;
+ }
+ 
+ bool CEGLNativeTypeBoxee::CreateNativeWindow()
+ {
+ #if defined(TARGET_BOXEE)
+   m_nativeWindow = 0x6;
+   return true;
+ #else
+   return false;
+ #endif
+ }  
+ 
+ bool CEGLNativeTypeBoxee::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+ {
+   if (!nativeDisplay)
+     return false;
+   *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+   return true;
+ }
+ 
+ bool CEGLNativeTypeBoxee::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+ {
+   if (!nativeWindow || !m_nativeWindow)
+     return false;
+   *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+   return true;
+ }
+ 
+ bool CEGLNativeTypeBoxee::DestroyNativeDisplay()
+ {
+   return true;
+ }
+ 
+ bool CEGLNativeTypeBoxee::DestroyNativeWindow()
+ {
+   m_nativeWindow = NULL;
+   return true;
+ }
+ 
+ bool CEGLNativeTypeBoxee::GetNativeResolution(RESOLUTION_INFO *res) const
+ {
+ #if defined(TARGET_BOXEE)
+   res->iWidth = 1280;
+   res->iHeight= 720;
+ 
+   res->fRefreshRate = 60;
+   res->dwFlags= D3DPRESENTFLAG_PROGRESSIVE;
+   res->iScreen       = 0;
+   res->bFullScreen   = true;
+   res->iSubtitles    = (int)(0.965 * res->iHeight);
+   res->fPixelRatio   = 1.0f;
+   res->iScreenWidth  = res->iWidth;
+   res->iScreenHeight = res->iHeight;
+   res->strMode.Format("%dx%d @ %.2f%s - Full Screen", res->iScreenWidth, res->iScreenHeight, res->fRefreshRate,
+   res->dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
+   CLog::Log(LOGNOTICE,"Current resolution: %s\n",res->strMode.c_str());
+   return true;
+ #else
+   return false;
+ #endif
+ }
+ 
+ bool CEGLNativeTypeBoxee::SetNativeResolution(const RESOLUTION_INFO &res)
+ {
+   return false;
+ }
+ 
+ bool CEGLNativeTypeBoxee::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+ {
+   RESOLUTION_INFO res;
+   bool ret = false;
+   ret = GetNativeResolution(&res);
+   if (ret && res.iWidth > 1 && res.iHeight > 1)
+   {
+     resolutions.push_back(res);
+     return true;
+   }
+   return false;
+ }
+ 
+ bool CEGLNativeTypeBoxee::GetPreferredResolution(RESOLUTION_INFO *res) const
+ {
+   return false;
+ }
+ 
+ bool CEGLNativeTypeBoxee::ShowWindow(bool show)
+ {
+   return false;
+ }
diff -crbN xbmc-12.2.orig/xbmc/windowing/egl/EGLNativeTypeBoxee.h xbmc-12.2/xbmc/windowing/egl/EGLNativeTypeBoxee.h
*** xbmc-12.2.orig/xbmc/windowing/egl/EGLNativeTypeBoxee.h	1970-01-01 01:00:00.000000000 +0100
--- xbmc-12.2/xbmc/windowing/egl/EGLNativeTypeBoxee.h	2013-07-31 14:27:49.000000000 +0200
***************
*** 0 ****
--- 1,51 ----
+ #pragma once
+ 
+ /*
+  *      Copyright (C) 2011-2012 Team XBMC
+  *      http://www.xbmc.org
+  *
+  *  This Program is free software; you can redistribute it and/or modify
+  *  it under the terms of the GNU General Public License as published by
+  *  the Free Software Foundation; either version 2, or (at your option)
+  *  any later version.
+  *
+  *  This Program is distributed in the hope that it will be useful,
+  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+  *  GNU General Public License for more details.
+  *
+  *  You should have received a copy of the GNU General Public License
+  *  along with XBMC; see the file COPYING.  If not, see
+  *  <http://www.gnu.org/licenses/>.
+  *
+  */
+ 
+ #include "EGLNativeType.h"
+ 
+ 
+ class CEGLNativeTypeBoxee : public CEGLNativeType
+ {
+ public:
+   CEGLNativeTypeBoxee();
+   virtual ~CEGLNativeTypeBoxee();
+   virtual std::string GetNativeName() const { return "boxee"; };
+   virtual bool  CheckCompatibility();
+   virtual void  Initialize();
+   virtual void  Destroy();
+   virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+ 
+   virtual bool  CreateNativeDisplay();
+   virtual bool  CreateNativeWindow();
+   virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+   virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+ 
+   virtual bool  DestroyNativeWindow();
+   virtual bool  DestroyNativeDisplay();
+ 
+   virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+   virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+   virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+   virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+ 
+   virtual bool  ShowWindow(bool show);
+ };
diff -crbN xbmc-12.2.orig/xbmc/windowing/egl/EGLWrapper.cpp xbmc-12.2/xbmc/windowing/egl/EGLWrapper.cpp
*** xbmc-12.2.orig/xbmc/windowing/egl/EGLWrapper.cpp	2013-05-03 07:57:41.000000000 +0200
--- xbmc-12.2/xbmc/windowing/egl/EGLWrapper.cpp	2013-07-31 14:33:42.000000000 +0200
***************
*** 83,88 ****
--- 83,97 ----
        }
      }
    }
+   nativeGuess = new CEGLNativeTypeBoxee;
+   if (nativeGuess->CheckCompatibility())
+   {
+     if(implementation == nativeGuess->GetNativeName() || implementation == "auto")
+     {
+       m_nativeTypes = nativeGuess;
+       ret = true;
+     }
+   }
  
    if (ret && m_nativeTypes)
      m_nativeTypes->Initialize();
diff -crbN xbmc-12.2.orig/xbmc/windowing/egl/Makefile xbmc-12.2/xbmc/windowing/egl/Makefile
*** xbmc-12.2.orig/xbmc/windowing/egl/Makefile	2013-05-03 07:57:41.000000000 +0200
--- xbmc-12.2/xbmc/windowing/egl/Makefile	2013-07-31 14:22:02.000000000 +0200
***************
*** 2,7 ****
--- 2,8 ----
  
  SRCS = WinSystemEGL.cpp
  SRCS+= EGLNativeTypeAmlogic.cpp
+ SRCS+= EGLNativeTypeBoxee.cpp
  SRCS+= EGLNativeTypeAndroid.cpp
  SRCS+= EGLNativeTypeRaspberryPI.cpp
  SRCS+= EGLWrapper.cpp
